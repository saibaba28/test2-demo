# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

stages: 
- stage: BUILD_STAGE
  jobs:
  - job: demo
    steps:
      - bash: echo "Stage build"
 
# - stage: Scan_Code
#   jobs:
#   - job: test
#     steps:
#       - bash: echo "Stage scan"

# - stage: PUBLISH_ARTIFACT
#   jobs:
#   - job: Publish_Artifact
#     steps:
#      - bash: echo "Stage publish"

- stage: DEV_DEPLOYMENT
  jobs:
  - job: test3
    steps:
     - bash: echo "Stage dev"

- stage: QA_SIGN_OFF
  condition: succeededOrFailed()
  dependsOn:
  - DEV_DEPLOYMENT
  - QA1_DEPLOYMENT
  variables:
  - name: var
    value: $[in(Succeeded('QA1_DEPLOYMENT')]
    
      #or(in(stageDependencies.QA1_DEPLOYMENT.deployQA.result, 'Succeeded'),in(stageDependencies.QA2_DEPLOYMENT.deployQA.result, 'Succeeded'),in(stageDependencies.QA3_DEPLOYMENT.deployQA.result, 'Succeeded'))]
  jobs:
  - job: test_0C
#    condition: in(stageDependencies.BUILD_STAGE.demo.result, 'Succeeded')
    steps:
     - task: Bash@3
       inputs:
        targetType: 'inline'
        script: | 
         if [ "$(var)" = "True" ]; then
          echo $(var)
          exit 1
          fi 
          echo $(var)
          echo "no exit :)"
  - job: test_02
    steps:
     - bash: echo "Stage BD"    

- stage: QA1_DEPLOYMENT
  dependsOn: DEV_DEPLOYMENT
  jobs:
  - deployment: deployQA
    displayName: QADeployemnt1
    environment: OLB-QA
    strategy:
     runOnce:
       deploy: 
        steps:
         - task: Bash@3
           inputs:
             targetType: 'inline'
             script: |
                  echo "hello"
             

# - stage: QA2_DEPLOYMENT
#   dependsOn: DEV_DEPLOYMENT
#   jobs:
#    - deployment: deployQA
#      displayName: QADeployemnt2
#      environment: OLB-QA
#      strategy:
#       runOnce:
#        deploy: 
#         steps:
#           - task: Bash@3
#             inputs:
#              targetType: 'inline'
#              script: |
#                   exit 1

# - stage: QA3_DEPLOYMENT
#   dependsOn: DEV_DEPLOYMENT
#   jobs:
#   - deployment: deployQA
#     displayName: QADeployemnt3
#     environment: OLB-QA
#     strategy:
#       runOnce:
#        deploy: 
#         steps:
#          - task: Bash@3
#            inputs:
#              targetType: 'inline'
#              script: |
#                  exit 1

# - stage: PROD_DEPLOYMENT
#   dependsOn: QA_SIGN_OFF
#   condition: succeeded('QA_SIGN_OFF')

#   jobs:
#   - job: test4
#     steps:
#      - bash: echo "Stage prod"

# - stage: SIGNED_OFF
#   dependsOn: PROD_DEPLOYMENT
#   condition: succeeded('PROD_DEPLOYMENT')
#   jobs:
#   - job: Approve
#     steps:
#      - bash: echo "Stage dev"
# - stage: QA_SIGN_OFF
#   dependsOn: DEV_DEPLOYMENT
#   #        in(stageDependencies.QA1_DEPLOYMENT.Qa1_Deploy.result, 'Succeeded'),
# #        in(StageDependencies.QA2_DEPLOYMENT.Qa2_Deploy.result, 'Succeeded')
# or(in(succeeded('PUBLISH_ARTIFACT'), 'True'),in(succeeded('DEV_DEPLOYMENT2'), 'True'))
#   variables:
#   - name: var
#     value: $[stageDependencies.QA1_DEPLOYMENT.Qa1_Deploy.result]
#   jobs:
#   - deployment: deployProd
#     displayName: QADeployment2
#     environment: OLB-QA
#   - job: QA_check
#     steps:
#      - task: Bash@3
#        inputs:
#         targetType: 'inline'
#         script: | 
#          if [ "$(var)" = "True" ]; then
#           echo $(var)
#           exit 1
#           fi 
#           echo $(var)
#           echo "no exit :)"
#           echo $[stageDependencies.QA1_DEPLOYMENT.Qa1_Deploy.result]
#           echo $(stageDependencies.QA1_DEPLOYMENT.Qa1_Deploy.result)
#           echo $[dependencies.QA1_DEPLOYMENT.Qa1_Deploy.result]
#           echo $(dependencies.QA1_DEPLOYMENT.Qa1_Deploy.result)
#           echo $[dependencies.QA1_DEPLOYMENT.result]
#           echo $(dependencies.QA1_DEPLOYMENT.result)
#           echo $[dependencies.QA1_DEPLOYMENT.result]
#           echo $(dependencies.QA1_DEPLOYMENT.result)
# - stage: QA1_DEPLOYMENT
#   dependsOn: DEV_DEPLOYMENT
#   jobs:
#   - job: Qa1_Deploy
#     steps:
#     - bash: echo "Stage test"

# - stage: QA2_DEPLOYMENT
#   dependsOn: DEV_DEPLOYMENT
#   jobs:
#   - job: Qa2_Deploy
#     steps:
#      - bash: echo "Stage test1"

# # - stage: QA3_DEPLOYMENT
# #   dependsOn: DEV_DEPLOYMENT
# #   jobs:
# #   - job: Qa3_Deploy
# #     steps:
# #      - bash: echo "Stage dev"

# # - stage: QA4_DEPLOYMENT
# #   dependsOn: DEV_DEPLOYMENT
# #   jobs:
# #   - job: Qa4_Deploy
# #     steps:
# #      - bash: echo "Stage dev"

# # - stage: QA5_DEPLOYMENT
# #   dependsOn: DEV_DEPLOYMENT
# #   jobs:
# #   - job: Qa5_Deploy
# #     steps:
# #      - bash: echo "Stage dev"

# - stage: PROD_DEPLOYMENT
#   dependsOn: QA_SIGN_OFF
#   jobs:
#   - job: Deploy
#     steps:
#      - bash: echo "Stage dev"

#   # - job: QA_result_check
#   #   steps:
#   #    - bash: echo $(dependencies.QA1_DEPLOYMENT.result)
#     #  - bash: echo $[stageDependencies.QA2_DEPLOYMENT.Qa2_Deploy.result]
#     #  - bash: echo $[stageDependencies.QA3_DEPLOYMENT.Qa3_Deploy.result]
#     #  - bash: echo $[stageDependencies.QA4_DEPLOYMENT.Qa4_Deploy.result]
#     #  - bash: echo $[stageDependencies.QA5_DEPLOYMENT.Qa5_Deploy.result]
# - stage: SIGNED_OFF
#   jobs:
#   - job: Approve
#     steps:
#      - bash: echo "Stage dev"